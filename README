microrl - micro read line library for small and embedded devices with some basic VT100 support.

1. DESCRIPTION

microrl library designed for use in small and embedded devices where we want to have command line interface. Main goal is make compact, small memory consuming but powerfull interfaces, with support navigation through command line with cursor, HOME, END keys, hot key like Ctrl+U and other, history and completion feature.

Library needs 2 obliging callbacks, first called for print to output stream. Second callback called then user press Enter, it give command line tokens for you handling. There is third not obliging callbacks, library call him then user press TAB and waiting for command completion, it also give you command line token, but you need return completion set.

For library work, you can just put chars from input stream by calling microrl_insert_char.


2. FEATURE

	** config.h file
	 - Turn on/off feature for add functional/decrease memory via config files.

	** hot keys support
	 - backspace, cursor arrow, HOME, END keys
	 - Ctrl+U (cut line from cursor to begin) 
	 - Ctrl+K (cut line from cursor to end) 
	 - Ctrl+A (like HOME) 
	 - Ctrl+E (like END)
	 - Ctrl+H (like backspace)
	 - Ctrl+B (like cursor arrow left) 
	 - Ctrl+F (like cursor arrow right)
	 - Ctrl+P (like cursor arrow up)
	 - Ctrl+N (like cursor arrow down)

	** history
	 - Static ring buffer history for memory saving. Number of commands saved to history depends from commands length and buffer size (defined in config)

	** completion
	 - via completion callback

3. SRC STRUCTURE

microrl/       - library source
  microrl.c    - microrl routines
  microrl.h    - lib interface and data type
  config.h     - customisation config-file
avr_misc/      - avr specific routines for avr example
unix_misc/     - unix specific routines for desktop example
example.c      - common part of example, for build  demonstrating example for various platform
example_misc.h - interface to platform specific routines for example build (avr, unix)
Makefile       - unix example build (gcc)
Makefiel.avr   - avr example build (avr-gcc)


4. INSTALL

Requests: c99 (gnu99) compiler with libc. In you code you have to provide some callbacks for library work.
NOTE: add key -std=gnu99 for gcc

You need to do few simple steps:

a) Include microrl.h file to you project.

b) Create 'microrl_t' object, and call 'microrl_init' func, with print callback pointer. Print callback pointer is pointer to function that call by library if it's need to put text to terminal. Text string always is null terminated.
For example on linux PC print callback may be:
	// print callback for microrl library
	void print (char * str)
	{
		fprintf (stdout, "%s", str);
	}

c) Call 'microrl_set_execute_callback' with pointer to you function, that will call if user press enter in terminal. Execute callback give a 'argc', 'argv' parametrs, like 'main' func in application. All token in 'argv' is null terminated. So you can simply walk through argv and handle commands.

d) If you want completion support if user press TAB key, call 'microrl_set_completion_callback' and set you callback. It also give 'argc' and 'argv' arguments, so iterate through it and return set of complete variants. 

e) Look at 'config.h' file, for tune library for you requiring. 

f) Now you just call 'microrl_insert_char' on each received from input stream (usart, network, etc) chars.

Example of code:

	//*****************************************************************************
	int main (int argc, char ** argv)
	{
		// create microrl object and pointer on it
		microrl_t rl;
		microrl_t * prl = &rl;
		// call init with ptr to microrl instance and print callback
		microrl_init (prl, print);
		// set callback for execute
		microrl_set_execute_callback (prl, execute);
		// set callback for completion
		microrl_set_complite_callback (prl, complet);
		
		while (1) {
			// put received char from stdin to microrl lib
			char ch = get_char ();
			microrl_insert_char (prl, ch);
		}
		return 0;
	}

See microrl_tst.c for example library usage.



Author: Eugene Samoylov aka Helius (ghelius@gmail.com) 
01.09.2011
